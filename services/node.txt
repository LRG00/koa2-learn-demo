1.异步async
await 会返回一个 promise对象 
const a = await new Promise((resolve, reject) => {
  setTimeout(function () {
    new Date().getTime()
    resolve('a') // 返回的值
  }, 1000)
})

2.koa中间件
中间件： 请求和相应都执行
环形 next执行下一个中间件
实现一个中间件

3. 路由写法和cookie，sesion

4.mongoose

5.redis  存储session
mac下载 
brew install dedis
redis-server
redis-cli 

npm install koa-generic-session koa-redis

5.1 const Redis = require('koa-redis')
app.keys=['keys','keyskeys']
app.use(session({
  key:'mt', // key值
  prefix:'mtpr', //前缀
  store:new Redis()
}))

5.2 const Store = new Redis().client
router.get('/fix',async function(ctx){
  const st = await Store.hset('fix','name',Math.random())
  ctx.body={
    code:0
  }
})